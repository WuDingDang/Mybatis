<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!-- default表示默认使用的环境 -->
    <!-- mybatis创建SqlSessionFactory对象时，没有指定环境，会使用默认环境 -->
    <environments default="development">
        <!-- 其中一个环境，连接的数据库是studydb -->
        <!-- 一般一个数据库会对应一个SqlSessionFactory对象 -->
        <!-- 一个环境environment会对应一个SqlSessionFactory对象 -->
        <environment id="development">
            <!--
                transactionManager标签：
                    1.作用：配置事务管理器，指定mybatis具体使用什么方式管理事务
                    2.type属性的两个值：
                        JDBC:使用原生的JDBC代码管理事务
                            conn.setAutoCommit(false);
                            ...
                            conn.commit();
                        MANAGED:mybatis不再负责事务管理，将事务管理交给其他JEE容器管理（如Spring）
                    3.不区分大小写
                    4.在mybatis中提供了一个事务管理器接口：Transaction
                        该接口下有两个实现类：
                            JdbcTransaction
                            ManagedTransaction
                        若type="JDBC"，底层会实例化JdbcTransaction对象
                        若type="MANAGED"，底层会实例化ManagedTransaction对象
            -->
            <transactionManager type="JDBC"/>
            <!--
                dataSource：
                    1.dataSource被称为数据源
                    2.作用:为程序提供Connection对象（给程序提供Connection对象的都叫数据源）
                    3.数据源实际上是一套规范，JDK中有这套规范：javax.sql.DataSource
                    4.自己也可以编写数据源组件，只要实现javax.sql.DataSource接口，实现接口中所有方法
                      比如可以自己写一个数据库连接池（数据库连接池是提供对象的，所以数据库连接池就是一个数据源）
                    5.常见的数据源组件（常见的数据库连接池）：
                        druid
                        c3p0
                        dbcp
                    6.type属性用来指定数据源类型，就是指定具体使用什么方式获取Connection对象
                         有三个值：
                         UNPOOLED|POOLED|JNDI
                         UNPOOLED：不使用数据库连接池技术，每次请求后，都创建新的Connection对象
                         POOLED：使用mybatis自己实现的数据库连接池
                         JNDI：集成其他第三方数据库连接池

              -->
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.cj.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/studydb"/>
                <property name="username" value="root"/>
                <property name="password" value="123456"/>
            </dataSource>
        </environment>
    </environments>

    <mappers>
        <mapper resource="CarMapper.xml"/>
    </mappers>
</configuration>